/* @copyright Copyright (c) 2021 Maxim Khorin <maksimovichu@gmail.com> */
 'use strict'; Jam.AttrList = class AttrList extends Jam.AttrList { init () { super.init(); this.initRelationSort(); } initRelationSort () { if (this.params.relationSort) { this.findCommand('relationSort') .click(this.onSortRelation.bind(this)) .toggleClass('ordered', this.params.relationSort.active); } } onSortRelation () { this.openFrame(this.params.relationSort.url, null, this.onAfterFrameClose.bind(this)); } onAfterFrameClose (event, data) { if (data.order || data.deleted) { this.findCommand('relationSort').toggleClass('ordered', !!data.order); this.grid.clearOrder(); this.reload(); } } }; 'use strict'; Jam.RelationSelectModelAttr = class extends Jam.RelationSelectModelAttr { initBase () { super.initBase(); this.initRelationSort(); } initRelationSort () { if (this.params.relationSort) { this.findCommand('relationSort') .click(this.onSortRelation.bind(this)) .toggleClass('ordered', this.params.relationSort.active); } } onSortRelation () { this.openFrame(this.params.relationSort.url, null, this.onAfterCloseFrame.bind(this)); } onAfterCloseFrame (event, data) { if (data.order || data.deleted) { this.findCommand('relationSort').toggleClass('ordered', !!data.order); this.sortByIdList(data.order); } } }; 'use strict'; Jam.MainList = class MainList extends Jam.MainList { getCloneParams ($row) { const id = $row.data('id'); return {c: this.grid.getData(id)._class, id}; } }; Jam.TreeList = class TreeList extends Jam.TreeList { onClickRow (event) { if (super.onClickRow(event)) { return true; } const name = $(event.currentTarget).data('class'); this.toggleRowSelect(this.findSelectedRows().not(`[data-class="${name}"]`), false); } }; Jam.MainTreeList = class MainTreeList extends Jam.MainTreeList { getCreateUrl () { const $rows = this.findSelectedRows(); const name = $rows.first().data('class'); const url = this.params.create; return name ? Jam.UrlHelper.addParams(url, {c: name}) : url; } getDeleteUrl ($rows) { const name = $rows.first().data('class'); return Jam.UrlHelper.addParams(this.params.delete, {c: name}); } getObjectIdParam ($rows) { const data = {id: $rows.first().data('id')}; const className = $rows.first().data('class'); if (className) { data.c = className; } return data; } onClickRow (event) { if (super.onClickRow(event)) { return true; } const name = $(event.currentTarget).data('class'); this.toggleRowSelect(this.findSelectedRows().not(`[data-class="${name}"]`), false); } onCreate (event) { const $row = this.findSelectedRows(); if ($row.length !== 1) { return super.onCreate(event); } const node = this.grid.getNodeByRow($row); super.onCreate(event, { node: node.getId(), depth: node.getDepth() }); } }; Jam.SelectClassList = class SelectClassList extends Jam.SelectList { onSelect () { const $row = this.getSelectedRow(); if ($row) { this.frame.load(this.params.create, {c: this.serializeObjectIds($row)}); } } openNewPage () { } }; 'use strict'; Jam.RelationSortList = class RelationSortList extends Jam.SortList { getCommandMethod (name) { switch (name) { case 'deleteSort': return this.onDeleteSort; } return super.getCommandMethod(name); } setSourceOrderNumbers () { } getChangedOrder () { const result = []; for (const row of this.findRows()) { result.push(row.dataset.id); } return result; } onDeleteSort () { Jam.dialog.confirmDeletion('Delete relation sorting?').then(() => { this.post(this.params.url, {delete: true}).done(() => { this.changed = false; this.frame.close({deleted: true}); }); }); } onSaveClose () { const order = this.getChangedOrder(); this.post(this.params.url, {order}).done(()=> { this.changed = false; this.frame.close({order}); }); } }; 'use strict'; Jam.DocModel = class DocModel extends Jam.Model { init () { if (this.isTransiting()) { this.setTransiting(); } this.workflow = new Jam.ModelWorkflow(this); super.init(); } isTransiting () { return this.params.transiting; } formatAttrName (name) { return typeof name !== 'string' || name.includes('[') ? name : `data[${name}]`; } setTransiting () { this.findCommand('history').remove(); this.findCommand('transiting').show(); this.findCommand('transitions').remove(); this.findCommand('delete').remove(); } }; 'use strict'; Jam.ModelTransition = class ModelTransition { constructor (workflow, $control) { this.workflow = workflow; this.model = workflow.model; this.$control = $control; this.name = $control.data('transition'); this.options = $control.data('options'); } getOption (key, defaults) { return Jam.ObjectHelper.getNestedValue(key, this.options, defaults); } confirm () { const message = this.getOption('confirmation'); return message ? Jam.dialog.confirm(this.translate(message)) : true; } execute () { return $.when(this.confirm()).then(()=> { if (this.model.validate()) { return this.forceExecute(); } }); } forceExecute () { this.workflow.setTransitionValue(this.name); return this.model.forceSave(true); } translate (message) { return Jam.t(message, this.$control.data('t')); } }; 'use strict'; Jam.ModelWorkflow = class ModelWorkflow { constructor (model) { this.model = model; model.findCommand('transit').click(this.onTransit.bind(this)); model.events.on('beforeValidate', this.onBeforeValidate.bind(this)); } onBeforeValidate () { this.setTransitionValue(''); } setTransitionValue (value) { this.model.$form.find('[name="transition"]').val(value); } onTransit (event) { event.preventDefault(); this.createTransition($(event.target)).execute(); } createTransition ($control) { const options = $control.data('options') || {}; const Transition = options.jam ? Jam.getClass(`${options.jam}ModelTransition`) : Jam.ModelTransition; return new Transition(this, $control); } };